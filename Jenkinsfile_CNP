#!groovy
@Library("Infrastructure") _

import uk.gov.hmcts.contino.AppPipelineDsl

properties([
  [$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/sscs-evidence-share'],
  pipelineTriggers([[$class: 'GitHubPushTrigger']])
])

def type = "java"
def product = "sscs"
def component = "evidence-share"

def secrets = [
  'sscs-${env}'                                                    : [
    secret('idam-api', 'IDAM_API_URL'),
    secret('idam-oauth-user', 'IDAM_OAUTH2_CLIENT_ID'),
    secret('idam-redirect', 'IDAM_OAUTH2_REDIRECT_URL'),
    secret('idam-sscs-systemupdate-user', 'IDAM_SSCS_SYSTEMUPDATE_USER'),
    secret('idam-sscs-systemupdate-password', 'IDAM_SSCS_SYSTEMUPDATE_PASSWORD'),
    secret('idam-sscs-oauth2-client-secret', 'IDAM_OAUTH2_CLIENT_SECRET'),
    secret('ccd-api', 'CORE_CASE_DATA_API_URL'),
    secret('ccd-jid', 'CORE_CASE_DATA_JURISDICTION_ID'),
    secret('ccd-tid', 'CORE_CASE_DATA_CASE_TYPE_ID'),
    // Used by Kubernetes
    secret('idam-s2s-api', 'IDAM_S2S_AUTH'),
    secret('sscs-s2s-secret', 'IDAM_S2S_AUTH_TOTP_SECRET'),
    secret('s2s-micro', 'IDAM_S2S_AUTH_MICROSERVICE'),
    secret('sscs-servicebus-shared-access-key', 'AMQP_PASSWORD'),
    secret('docmosis-endpoint', 'PDF_SERVICE_BASE_URL'),
    secret('docmosis-api-key', 'PDF_SERVICE_ACCESS_KEY'),
    secret('robotics-email-from', 'ROBOTICS_EMAIL_FROM'),
    secret('robotics-email-to', 'ROBOTICS_EMAIL_TO'),
    secret('robotics-email-scottish-to', 'ROBOTICS_EMAIL_SCOTTISH_TO'),
    secret('robotics-email-pip-ae-to', 'ROBOTICS_EMAIL_PIP_AE_TO'),
    secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline(type, product, component) {
  env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

  before('functionalTest:preview') {
    withAksClient('nonprod', product) {
      // Vars needed for AKS testing
      env.DOCUMENT_MANAGEMENT_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
      env.CASE_DOCUMENT_AM_URL = 'http://ccd-case-document-am-api-aat.service.core-compute-aat.internal'
    }
  }

  before('functionalTest:aat') {
    withAksClient('nonprod', product) {
      // Vars needed for AKS testing
      env.DOCUMENT_MANAGEMENT_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
      env.CASE_DOCUMENT_AM_URL = 'http://ccd-case-document-am-api-aat.service.core-compute-aat.internal'
    }
  }

  loadVaultSecrets(secrets)
  enableSlackNotifications('#sscs-tech')
  enableAksStagingDeployment()
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)

  onMaster() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
  onPR() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
}

